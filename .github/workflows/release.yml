name: Release Package

# need to setup:
# secrets.PYPI_PASSWORD (See: https://pypi.org/help/#apitoken)

on:
  push:
    tags:
    - v*
env:
  PYTHON_VERSION: '3.11'
  PROJECT_NAME: rendakun

jobs:
  windows-build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: pip
        cache-dependency-path: poetry.lock

    - uses: abatilo/actions-poetry@v2

    - run: |
        poetry export -f requirements.txt -o requirements.txt -E build
        pip install -r requirements.txt

    - run: pyinstaller -F ${{ env.PROJECT_NAME }}/__init__.py -n ${{ env.PROJECT_NAME }} -i resources/icon.ico --version-file resources/file_version_info.txt

    - uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PROJECT_NAME }}-windows
        path: dist/${{ env.PROJECT_NAME }}.exe

  macOS-build:
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: pip
        cache-dependency-path: poetry.lock

    - uses: abatilo/actions-poetry@v2

    - run: |
        poetry export -f requirements.txt -o requirements.txt -E build
        pip install -r requirements.txt

    - run: pyinstaller -F ${{ env.PROJECT_NAME }}/__init__.py -n ${{ env.PROJECT_NAME }}   # -i resources/icon.icns

    - uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PROJECT_NAME }}-macos
        path: dist/${{ env.PROJECT_NAME }}

  ubuntu-build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: pip
        cache-dependency-path: poetry.lock

    - uses: abatilo/actions-poetry@v2

    - run: |
        poetry export -f requirements.txt -o requirements.txt -E build
        pip install -r requirements.txt

    - run: pyinstaller -F ${{ env.PROJECT_NAME }}/__init__.py -n ${{ env.PROJECT_NAME }}

    - uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PROJECT_NAME }}-linux
        path: dist/${{ env.PROJECT_NAME }}

  release:
    needs: [ubuntu-build, macOS-build, windows-build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v3
      with:
        name: ${{ env.PROJECT_NAME }}-windows

    - uses: actions/download-artifact@v3
      with:
        name: ${{ env.PROJECT_NAME }}-macos

    - uses: actions/download-artifact@v3
      with:
        name: ${{ env.PROJECT_NAME }}-linux

    - run: |
        zip --junk-paths ${{ env.PROJECT_NAME }}-windows ./${{ env.PROJECT_NAME }}-windows/${{ env.PROJECT_NAME }}.exe
        tar -C ${{ env.PROJECT_NAME }}-macos -pczvf ${{ env.PROJECT_NAME }}-macos.tar.gz ${{ env.PROJECT_NAME }}
        tar -C ${{ env.PROJECT_NAME }}-linux -pczvf ${{ env.PROJECT_NAME }}-linux.tar.gz ${{ env.PROJECT_NAME }}
    - run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> "$GITHUB_ENV"

    - id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.PROJECT_NAME }}-windows.zip
        asset_name: ${{ env.PROJECT_NAME }}-windows_${{ env.RELEASE_VERSION }}.zip
        asset_content_type: application/zip

    - uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.PROJECT_NAME }}-macos.tar.gz
        asset_name: ${{ env.PROJECT_NAME }}-macos_${{ env.RELEASE_VERSION }}.tar.gz
        asset_content_type: application/gzip

    - uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.PROJECT_NAME }}-linux.tar.gz
        asset_name: ${{ env.PROJECT_NAME }}-linux_${{ env.RELEASE_VERSION }}.tar.gz
        asset_content_type: application/gzip

  pypi:
    needs: release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        persist-credentials: false
    - name: Build and publish to pypi
      uses: JRubics/poetry-publish@v1.15
      with:
        pypi_token: ${{ secrets.PYPI_TOKEN }}
